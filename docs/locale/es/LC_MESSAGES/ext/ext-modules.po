# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, JulioLoayzaM
# This file is distributed under the same license as the CroissantBot
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CroissantBot \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-16 12:35+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../ext/ext-modules.rst:2 66171898f7324b14b6ba6d9b0a6eed18
msgid "ext modules"
msgstr ""

#: ../../ext/ext-modules.rst:4 5d785b53a0ce4b3fbe90b8f60e833334
msgid ""
"These modules provide classes used by the cogs. They are primarily built "
"around the rest of CroissantBot's code, but they could be useful when "
"creating a new cog."
msgstr ""

#: ../../ext/ext-modules.rst:9 70914062f3564ed2a106e93373ac8cc0
msgid "For music"
msgstr ""

#: ../../ext/ext-modules.rst:11 3428de52d6844e5eb2bd991491d4a85c
msgid ""
"The :py:mod:`song` module provides the :py:class:`song.Song` class, which"
" represents a single song and stores its info."
msgstr ""

#: ../../ext/ext-modules.rst:14 6dbbeb54aa6a471eb859e9584a42e836
msgid ""
"The :py:mod:`songqueue` module provides the "
":py:class:`songqueue.SongQueue` class, which implements a queue that "
"deals with :py:class:`song.Song` instances."
msgstr ""

#: ../../ext/ext-modules.rst:18 3fad8771a4064203b8b5b9801553efa3
msgid "For PostgreSQL databases"
msgstr ""

#: ../../ext/ext-modules.rst:20 c4dd964a2b614050b6c1df96c93bbb89
msgid "The :py:mod:`db` module provides two classes:"
msgstr ""

#: ../../ext/ext-modules.rst:22 df27ffc9efb542f08a74d6dfd0ce9e6d
msgid ""
"A base class, :py:class:`db.DatabaseConnection`, which can connect and "
"disconnect from a database, and check whether it is currently connected."
msgstr ""

#: ../../ext/ext-modules.rst:25 8fd5d26cbc0e4118b32134a6206e92a7
msgid ""
"The actual class, :py:class:`db.MusicDatabaseConnection`, to manage the "
"music database used by the :ref:`Playlist cog <cogs/playlist:playlist>`."
msgstr ""

#~ msgid ""
#~ "The :ref:`queue <ext/queue:queue module>` and"
#~ " :ref:`song <ext/song:song module>` modules "
#~ "are provided:"
#~ msgstr ""

#~ msgid ""
#~ "The :py:mod:`song` module provides the "
#~ ":py:class:`Song` class, which represents a "
#~ "single song and stores its info."
#~ msgstr ""

#~ msgid ""
#~ "The :py:mod:`queue` module provides the "
#~ ":py:class:`Queue` class, which implements a"
#~ " queue that deals with :py:class:`Song` "
#~ "instances."
#~ msgstr ""

#~ msgid "The :ref:`ext/db:db module` is provided. It provides two classes:"
#~ msgstr ""

#~ msgid ""
#~ "A base class (:py:class:`DatabaseConnection`) "
#~ "which can connect and disconnect from"
#~ " a database, and check whether it "
#~ "is currently connected."
#~ msgstr ""

#~ msgid ""
#~ "A class (:py:class:`MusicDatabaseConnection`) to "
#~ "manage the music database used by "
#~ "the :ref:`Playlist cog <cogs/playlist:playlist>`."
#~ msgstr ""

